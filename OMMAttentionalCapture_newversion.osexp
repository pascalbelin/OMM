---
API: 2.1
OpenSesame: 3.3.10
Platform: nt
---
set width 1024
set uniform_coordinates yes
set title "OMM Attentional Capture"
set subject_parity even
set subject_nr 0
set start experiment
set sound_sample_size -16
set sound_freq 48000
set sound_channels 2
set sound_buf_size 1024
set sampler_backend legacy
set round_decimals 2
set mouse_backend legacy
set keyboard_backend legacy
set height 768
set fullscreen no
set form_clicks no
set foreground white
set font_underline no
set font_size 18
set font_italic no
set font_family mono
set font_bold no
set experiment_path "C:/Users/pbeli/Documents/GitHub/OMM"
set disable_garbage_collection yes
set description "Loosely based on Theeuwes (1992)"
set coordinates relative
set compensation 0
set color_backend legacy
set clock_backend legacy
set canvas_backend legacy
set bidi no
set background black

define OMMConditioner OMMConditioner
	set sound "do nothing"
	set serial_port COM4
	set reward yes
	set motor_pause 200
	set motor_n_pulses 5
	set description "Conditioner plugin for Open Monkey Mind"
	set conditioner Dummy

define OMMRequestJob OMMRequestJob
	set test_loop test_loop
	set omm_server "127.0.0.1"
	set omm_port 3000
	set omm_api 1
	set jonb_index ""
	set job_index "[current_job]"
	set description "Plugin to request current job for Open Monkey Mind"
	set block_size 4
	set block_select yes
	set _run ""
	set _prepare ""

define inline_script constants
	set description "Executes Python code"
	set _run ""
	___prepare__
	# The distance of the stimuli from the center
	eccentricity = 250
	# The size of the shapes
	stim_size = 100
	# The length of the line segments in the shapes
	line_size = 75
	# The number of stimuli
	set_size = 8
	# The line thickness of the stimuli
	penwidth = 4
	# The possible colors, shapes, and orientations
	colors = ['blue', 'yellow']
	shapes = ['rect', 'circle']
	all_orientations = 0, 30, 60, 90, 120, 150
	nontarget_orientations = 30, 60, 120, 150
	target_orientations = [('z', 0), ('/', 90)]
	__end__

define sequence dummy_sequence
	set flush_keyboard yes
	set description "Runs a number of items in sequence"

define sequence experiment
	set flush_keyboard yes
	set description "The main sequence of the experiment"
	run get_session_data always
	run constants always
	run functions always
	run test_loop always
	run OMMRequestJob always
	run trial_sequence always
	run repeat_practice_if_necessary always
	run practice_done never
	run practice_repeat never

define sketchpad fixdot
	set duration 995
	set description "Displays stimuli"
	draw fixdot color=white show_if=always style=default x=0 y=0 z_index=0
	draw textline center=1 color=white font_bold=no font_family=mono font_italic=no font_size=18 html=yes show_if=always text="[omm_job_index] of [omm_job_count]" x=0 y=-224 z_index=0

define inline_script functions
	set description "Executes Python code"
	set _run ""
	___prepare__
	def draw_premask(cnvs, x, y):
	    
	    """
	    Draws a premask, which has the target shape and color, and has all possible
	    line segments in it.
	    
	    arguments:
	        cnvs:	The canvas to draw on.
	        x:		The x coordinate.
	        y:		The y coordinate.
	    """
	    
	    if var.target_shape == 'circle':
	        cnvs += Circle(x, y, stim_size/2, color=var.target_color)
	    else:
	        cnvs += Rect(
	            x-stim_size/2,
	            y-stim_size/2,
	            stim_size,
	            stim_size,
	            color=var.target_color
	        )
	    for orientation in all_orientations:
	        dx, dy = xy_from_polar(line_size/2, orientation)
	        cnvs += Line(x+dx, y+dy, x-dx, y-dy)
	        
	
	def draw_target(cnvs, x, y):
	    
	    """
	    Draws a target, which has the target shape and color, and has one line
	    segment with the target orientation in it.
	    
	    arguments:
	        cnvs:	The canvas to draw on.
	        x:		The x coordinate.
	        y:		The y coordinate.
	    """
	    
	    if var.target_shape == 'circle':
	        cnvs += Circle(x, y, stim_size/2, color=var.target_color)
	    else:
	        cnvs += Rect(
	            x-stim_size/2,
	            y-stim_size/2,
	            stim_size,
	            stim_size,
	            color=var.target_color
	        )
	    dx, dy = xy_from_polar(line_size/2, target_orientation)
	    cnvs += Line(x+dx, y+dy, x-dx, y-dy)
	    
	
	def draw_nontarget(cnvs, x, y, color):
	    
	    """
	    Draws a non-target, which has the target shape, and a line segment with
	    a random orientation in it (not vertical or horizontal).
	    
	    arguments:
	        cnvs:	The canvas to draw on.
	        x:		The x coordinate.
	        y:		The y coordinate.
	        color:	The shape color.
	    """	
	    
	    if var.nontarget_shape == 'circle':
	        cnvs += Circle(x, y, stim_size/2, color=color)
	    else:
	        cnvs += Rect(
	            x-stim_size/2,
	            y-stim_size/2,
	            stim_size,
	            stim_size,
	            color=color
	        )
	    orientation = random.choice(nontarget_orientations)
	    dx, dy = xy_from_polar(line_size/2, orientation)
	    cnvs += Line(x+dx, y+dy, x-dx, y-dy)
	__end__

define inline_script get_session_data
	set description "Executes Python code"
	set _run ""
	___prepare__
	import random
	
	# Check if the omm object exists, and if so whether it is connected to a
	# server.
	if 'omm' in globals() and omm.connected:
	    session_data = omm.generic_session_data  # retrieve session data from server
	    print('session_data', session_data)
	    # If there is no session data yet, this means that we are starting a new
	    # session. Therefore, we generate a randomly ordered list of all job
	    # indices, and an empty list of all jobs that are already done.
	    if session_data is None:
	        jobs_todo = list(range(1, omm.job_count + 1))
	        random.shuffle(jobs_todo)
	        jobs_done = []
	    # Otherwise unpack the session data, which is a tuple consisting of a list
	    # of job indices that are still to be done, and a list of (job_index, correct)
	    # tuples that indicate which jobs have already been done, and whether the
	    # associated response was correct.
	    else:
	        jobs_todo, jobs_done = session_data
	    var.current_job = jobs_todo[0]
	    print('participant: {} ({})'.format(omm.current_participant_name, omm.current_participant))
	    print('current job:', var.current_job)
	    print('jobs todo:', jobs_todo)
	    print('jobs done:', jobs_done)
	else:
	    print('Not connected to OMM server')
	__end__

define sketchpad green_fixdot
	set duration 495
	set description "Displays stimuli"
	draw fixdot color=green show_if=always style=default x=0 y=0 z_index=0

define keyboard_response keyboard_response
	set timeout 3000
	set flush yes
	set event_type keypress
	set duration keypress
	set description "Collects keyboard responses"
	set allowed_responses "q;s"

define logger logger
	set description "Logs experimental data"
	set auto_log no
	log correct
	log distractor
	log response
	log response_time

define feedback practice_done
	set reset_variables yes
	set duration keypress
	set description "Provides feedback to the participant"
	draw textline center=1 color=white font_bold=no font_family=mono font_italic=no font_size=18 html=yes show_if=always text="You successfully completed the practice phase!<br /><br />Press any key to continue" x=0 y=0 z_index=0

define feedback practice_repeat
	set reset_variables yes
	set duration keypress
	set description "Provides feedback to the participant"
	draw textline center=1 color=white font_bold=no font_family=mono font_italic=no font_size=18 html=yes show_if=always text="Let's do a little more practice<br /><br />Press any key to continue" x=0 y=0 z_index=0

define sketchpad red_fixdot
	set duration 495
	set description "Displays stimuli"
	draw fixdot color=red show_if=always style=default x=0 y=0 z_index=0

define inline_script repeat_practice_if_necessary
	set description "Executes Python code"
	___run__
	from openmonkeymind import Job
	import statistics
	
	PRACTICE_LENGTH = 4
	MIN_ACC = .75
	
	if 'omm' in globals() and omm.connected:
	    # Remember that the current job is now done, and whether the response was correct
	    jobs_done.append((var.current_job, var.correct))
	    # If we've done all practice trials, check if the accuracy was high enough
	    if len(jobs_done) == PRACTICE_LENGTH:
	        acc = statistics.mean(job_correct for job_index, job_correct in jobs_done)
	        print('accuracy: {}'.format(acc))
	        # If the accuracy was too low, we re-add all done jobs to the todo list and
	        # clear the list of done jobs. We also reset all the Job states to pending,
	        # otherwise the announce will crash with 'No jobs available'.
	        if acc < MIN_ACC:
	            omm.set_job_states(1, omm.job_count + 1, Job.PENDING)
	            jobs_todo += [job_index for job_index, job_correct in jobs_done]
	            jobs_done = []
	            items['practice_repeat'].run()
	        else:
	            items['practice_done'].run()
	    omm.generic_session_data = jobs_todo[1:], jobs_done  # update the session data on the server
	__end__
	set _prepare ""

define loop test_loop
	set source_file ""
	set source table
	set repeat 1
	set order random
	set description "Repeatedly runs another item"
	set cycles 2
	set continuous no
	set break_if_on_first yes
	set break_if never
	setcycle 0 distractor present
	setcycle 1 distractor absent
	run dummy_sequence

define inline_script trial_script
	set description "Executes Python code"
	___run__
	premask_canvas.show()
	clock.sleep(495)
	target_canvas.show()
	__end__
	___prepare__
	import random
	
	# First determine the target and distractor positions. Positions are indices,
	# i.e. values between 0 and the number of items.
	positions = list(range(set_size))
	random.shuffle(positions)
	var.target_pos = positions[0]
	if var.distractor == 'present':
	    var.distractor_pos = positions[1]
	else:
	    var.distractor_pos = None
	
	# Get a random target orientation, and the associated correct response
	var.correct_response, target_orientation = random.choice(target_orientations)
	
	# Determine the target color and shape
	random.shuffle(colors)
	var.target_color = colors[0]
	var.distractor_color = colors[1]
	random.shuffle(shapes)
	var.target_shape = shapes[0]
	var.nontarget_shape = shapes[1]
	
	# Draw the premask canvas. Premasks have the target shape and color, and have
	# all possible line segments in it.
	premask_canvas = Canvas()
	premask_canvas.penwidth = penwidth
	premask_canvas += FixDot()
	for x, y in xy_circle(set_size, eccentricity):
	    # defined in the `functions` item
	    draw_premask(premask_canvas, x, y)
	
	# Draw the target canvas. The target canvas has three types of stimuli on it.
	# - nontargets, which have the target color and nontarget shape
	# - a distractor (on 50% of trials), which has the distractor color and
	#   nontarget shape
	# - a target, which has the target color and shape
	target_canvas = Canvas()
	target_canvas.penwidth = penwidth
	target_canvas += FixDot()
	for pos, (x, y) in enumerate(xy_circle(set_size, eccentricity)):
	    if pos == var.target_pos:
	        # defined in the `functions` item
	        draw_target(target_canvas, x, y)
	    elif pos == var.distractor_pos:
	        # defined in the `functions` item
	        draw_nontarget(target_canvas, x, y, color=var.distractor_color)
	    else:
	        # defined in the `functions` item:
	        draw_nontarget(target_canvas, x, y, color=var.target_color)
	__end__

define sequence trial_sequence
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run fixdot always
	run trial_script always
	run keyboard_response always
	run green_fixdot "[correct] = 1"
	run red_fixdot "[correct] = 0"
	run OMMConditioner always
	run logger always

